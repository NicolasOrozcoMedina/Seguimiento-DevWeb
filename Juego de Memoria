<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juego de Memoria</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f8ff;
            position: relative;
        }
        
        #start-screen {
            text-align: center;
        }
        
        #game-screen {
            display: none;
            flex-direction: column;
            align-items: center;
        }
        
        #end-screen {
            display: none;
            text-align: center;
        }
        
        button {
            padding: 10px 20px;
            font-size: 1.2rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            margin: 10px;
        }
        
        #give-up-btn {
            background-color: #f44336;
        }
        
        .stats {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 1.2rem;
        }
        
        .memory-game {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            grid-gap: 10px;
            margin: 20px;
        }
        
        .card {
            width: 100px;
            height: 100px;
            background-color: #2196F3;
            color: white;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
            transition: transform 0.5s;
            transform-style: preserve-3d;
        }
        
        .card.flipped {
            background-color: #ffeb3b;
            color: #333;
            transform: rotateY(180deg);
        }
        
        .card.matched {
            background-color: #4CAF50;
            cursor: default;
        }
        
        h1 {
            color: #333;
        }
        
        .win-message {
            font-size: 2rem;
            color: #4CAF50;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="stats" id="stats">
        Pasos: <span id="steps">0</span> | Tiempo: <span id="time">0</span>s
    </div>
    
    <div id="start-screen">
        <h1>Juego de Memoria</h1>
        <button id="start-btn">Quiero Jugar</button>
    </div>
    
    <div id="game-screen">
        <div class="memory-game" id="memory-game"></div>
        <button id="give-up-btn">Me rindo :(</button>
    </div>
    
    <div id="end-screen">
        <div class="win-message">Ganaste SIIIUUUU</div>
        <div>Pasos totales: <span id="final-steps">0</span></div>
        <div>Tiempo total: <span id="final-time">0</span> segundos</div>
        <button id="play-again-btn">Jugar de nuevo</button>
    </div>
    
    <script>
        // Elementos del DOM
        const startScreen = document.getElementById('start-screen');
        const gameScreen = document.getElementById('game-screen');
        const endScreen = document.getElementById('end-screen');
        const startBtn = document.getElementById('start-btn');
        const giveUpBtn = document.getElementById('give-up-btn');
        const playAgainBtn = document.getElementById('play-again-btn');
        const memoryGame = document.getElementById('memory-game');
        const stepsDisplay = document.getElementById('steps');
        const timeDisplay = document.getElementById('time');
        const finalStepsDisplay = document.getElementById('final-steps');
        const finalTimeDisplay = document.getElementById('final-time');
        
        // Variables del juego
        let cards = [];
        let flippedCards = [];
        let steps = 0;
        let startTime = 0;
        let timerInterval = null;
        const icons = ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼'];
        
        // Inicializar el juego
        function initGame() {
            // Crear pares de cartas
            let cardValues = [...icons, ...icons];
            
            // Barajar las cartas
            cardValues = shuffleArray(cardValues);
            
            // Crear las cartas en el DOM
            memoryGame.innerHTML = '';
            cards = [];
            
            cardValues.forEach((value, index) => {
                const card = document.createElement('div');
                card.className = 'card';
                card.dataset.value = value;
                card.dataset.index = index;
                card.textContent = '?';
                card.addEventListener('click', flipCard);
                memoryGame.appendChild(card);
                cards.push(card);
            });
            
            // Reiniciar variables
            flippedCards = [];
            steps = 0;
            stepsDisplay.textContent = steps;
            startTime = Date.now();
            
            // Iniciar temporizador
            if (timerInterval) clearInterval(timerInterval);
            timerInterval = setInterval(updateTimer, 1000);
            updateTimer();
        }
        
        // Barajar array
        function shuffleArray(array) {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }
        
        // Voltear carta
        function flipCard() {
            // No hacer nada si la carta ya está volteada o emparejada
            if (this.classList.contains('flipped') || this.classList.contains('matched')) {
                return;
            }
            
            // No voltear más de 2 cartas a la vez
            if (flippedCards.length >= 2) {
                return;
            }
            
            // Voltear la carta
            this.classList.add('flipped');
            this.textContent = this.dataset.value;
            flippedCards.push(this);
            
            // Si hay 2 cartas volteadas, verificar si coinciden
            if (flippedCards.length === 2) {
                steps++;
                stepsDisplay.textContent = steps;
                
                if (flippedCards[0].dataset.value === flippedCards[1].dataset.value) {
                    // Cartas coinciden
                    flippedCards.forEach(card => {
                        card.classList.add('matched');
                    });
                    flippedCards = [];
                    
                    // Verificar si el juego ha terminado
                    checkGameEnd();
                } else {
                    // Cartas no coinciden - voltear de nuevo después de un breve retraso
                    setTimeout(() => {
                        flippedCards.forEach(card => {
                            card.classList.remove('flipped');
                            card.textContent = '?';
                        });
                        flippedCards = [];
                    }, 1000);
                }
            }
        }
        
        // Actualizar temporizador
        function updateTimer() {
            const currentTime = Math.floor((Date.now() - startTime) / 1000);
            timeDisplay.textContent = currentTime;
        }
        
        // Verificar si el juego ha terminado
        function checkGameEnd() {
            const allMatched = [...cards].every(card => card.classList.contains('matched'));
            if (allMatched) {
                clearInterval(timerInterval);
                const finalTime = Math.floor((Date.now() - startTime) / 1000);
                finalStepsDisplay.textContent = steps;
                finalTimeDisplay.textContent = finalTime;
                gameScreen.style.display = 'none';
                endScreen.style.display = 'block';
            }
        }
        
        // Event Listeners
        startBtn.addEventListener('click', () => {
            startScreen.style.display = 'none';
            gameScreen.style.display = 'flex';
            initGame();
        });
        
        giveUpBtn.addEventListener('click', () => {
            clearInterval(timerInterval);
            gameScreen.style.display = 'none';
            startScreen.style.display = 'block';
        });
        
        playAgainBtn.addEventListener('click', () => {
            endScreen.style.display = 'none';
            gameScreen.style.display = 'flex';
            initGame();
        });
    </script>
</body>
</html>
